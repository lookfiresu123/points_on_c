1、启动gdb: 输入命令"gcc -g -Wall XXX.c -o XXX",并输入"gdb XXX"。
2、显示c语言源代码: 输入"l"。
3、显示汇编的所有源代码: 输入"layout asm"。
4、显示某个函数的汇编代码: 输入"disas 函数名"。
5、显示当前栈的信息: 输入"bt"
6、打印当前栈中顶部桢的信息: 输入"info f"
7、打印当前函数中的所有局部变量: 输入"info locals"
8、打印当前函数的参数名及其值: 输入"info args"
9、打印当前函数中的异常处理信息: 输入"info catch"
10、打印当前栈中第n层桢的信息: 输入"frame n"
11、用gdb如何查看指定地址的内存内容: 格式: x /nfu <addr>
    说明:
	x 是 examine 的缩写

	n表示要显示的内存单元的个数

	f表示显示方式, 可取如下值
	x 按十六进制格式显示变量。
	d 按十进制格式显示变量。
	u 按十进制格式显示无符号整型。
	o 按八进制格式显示变量。
	t 按二进制格式显示变量。
	a 按十六进制格式显示变量。
	i 指令地址格式
	c 按字符格式显示变量。
	f 按浮点数格式显示变量。

	u表示一个地址单元的长度
	b表示单字节，
	h表示双字节，
	w表示四字节，
	g表示八字节
12、a)  `layout src' 仅显示源代码窗口。
    b)  `layout asm' 仅显示汇编代码窗口。
    c)  `layout split' 显示源代码和汇编代码窗口。
    d)  `layout regs' 显示寄存器和源代码窗口，或者寄存器和汇编代码窗口。
    e)  `layout next` 和 `layout prev' 切换窗口。
    f)  ctrl + L 刷新屏幕。
    g)  `C-x 1' 单窗口模式。
    h)  `C-x 2' 双窗口模式。
    i)  `C-x a' 回到传统模式。
13、makefile中加入调试信息:
    main : $(objects)
        cc -g -Wall $(objects) -o main
    main.o : practice.h
        cc -c -g -Wall source/main.c -o main.o
    practice.o :
        cc -c -g -Wall source/practice.c -o practice.o
14、查看practice.c的预编译c文件:
	gcc -std=c99 -O0 -E practice.c | indent -linux
15、查看全局符号表的信息（其中symbol_table为存储信息的文件）:
    nm -s -p a.out > symbol_table   （按遇到的字符顺序显示）
    nm -s -n a.out > symbol_table   （按字符的地址顺序显示）
16、查看全局符号表的详细信息：
    readelf -s a.out > symbol_table
17、objdump：
    查看对象文件所有的节section：
    objdump -h a.out/a.o > objdump
    查看对象文件所有的符号：
    objdump -t a.out/a.o > objdump
    查看对象文件的汇编代码：
    objdump -Sl --no-show-raw-insn a.out/a.o > objdump
    查看文件内存分布情况：
    objdump -s a.out > objdump
18、查看链接信息：
    gcc -M a.c b.c c.c > main.linker.map
19、编写gdb脚本：
    创建脚本文件XX.sh，chmod a+x XX.sh
    用命令file a.out指定目标文件a.out
    按顺序添加gdb调试命令
    在终端中输入gdb a.out
    在之后终端界面里的(gdb)后面输入source XX.sh
20、调试c++程序：
    g++ -g -Wall -std=c++14 -D_GLIBCXX_DEBUG test.c -o test
21、使用valgrind工具测试程序是否存在内存泄漏：
    sudo apt-get install valgrind
    valgrind --tool=memcheck --leak-check=yes ./a.out
22、启动内核转储：
    ulimit -c unlimited
    sudo vim /etc/sysctl.conf
    add "kernel.core_pattern = /home/lookfiresu/core/%t-%e-%p-%c.core" （这样生成的core文件就存储在了指定目录中）
    sudo sysctl -p
    使用：执行文件"./a.out"，会生成core文件，之后键入命令"gdb -c 目标core文件 ./a.out"
23、attach到进程：
    ./a.out
    gdb
    attach pid （可以使用命令"ps -aux | grep a.out"获得进程号）
24、查看类层级
    g++/gcc -fdump-class-hierarchy XXX.h
